import argparse

from src import clean, model, model_properties, package, source
from src.libs.logger import CustomLogger
from src.libs.profile import default_target
from src.params import DBT_PROFILE_DEFAULT

logger = CustomLogger()


def build_model_subparser(sub_parsers):

    sub_parser = sub_parsers.add_parser(
        "model", 
        help='Generate models using .sql templates and model-scoped variables'
    )

    sub_parser.add_argument(
        "-r",
        "--run",
        help="Run/execute mode",
        const=True,
        action='store_const',
        default=False,
        required=False
    )
    sub_parser.add_argument(
        "-o",
        "--overwrite",
        help="Overwrite existing models",
        const=True,
        action='store_const',
        default=False,
        required=False
    )
    sub_parser.add_argument(
        "-s",
        "--select",
        help="Selected models",
        type=str,
        default=None,
        required=False
    )

    sub_parser.set_defaults(func=model.main)


def build_model_properties_subparser(sub_parsers):

    sub_parser = sub_parsers.add_parser(
        'model-properties', 
        help='Generate model properties file(s)'
    )

    sub_parser.add_argument(
        "-s",
        "--select",
        help="Selected models path within project",
        type=str,
        default=None,
        required=True
    )
    sub_parser.add_argument(
        "-sc",
        "--schema",
        help="Target schema containing models",
        type=str,
        default=None,
        required=True
    )
    sub_parser.add_argument(
        "-p",
        "--profile",
        help="Target dbt profile",
        type=str,
        default=DBT_PROFILE_DEFAULT,
        required=False
    )
    sub_parser.add_argument(
        "-us",
        "--use-schema",
        help="Target schema (derived from -s flag by default)",
        type=str,
        default=None,
        required=False
    )
    sub_parser.add_argument(
        "-uaf",
        "--updated-at-field",
        help="Target schema (derived from -s flag by default)",
        type=str,
        default='sys_modified',
        required=False
    )
    sub_parser.add_argument(
        "-ut",
        "--use-tables",
        help="Use tables",
        const=True,
        action='store_const',
        default=False, 
        required=False
    )
    sub_parser.add_argument(
        "-uv",
        "--use-views",
        help="Use views",
        const=True,
        action='store_const',
        default=False,
        required=False
    )
    sub_parser.add_argument(
        "-w",
        "--warn-only",
        help="Create warn only recency tests",
        const=True,
        action='store_const',
        default=False,
        required=False
    )

    sub_parser.set_defaults(func=model_properties.main)


def build_source_subparser(sub_parsers):

    sub_parser = sub_parsers.add_parser(
        "source", 
        help="Create dbt source files using selected {database}.{schema}"
    )

    sub_parser.add_argument(
        "-s",
        "--select",
        help="Selected sources",
        type=str,
        default=None,
        required=False
    )
    sub_parser.add_argument(
        "-o",
        "--overwrite",
        help="Overwrite existing sources",
        const=True,
        action='store_const',
        default=False,
        required=False
    )
    sub_parser.add_argument(
        "-t",
        "--target",
        help="Target environment",
        type=str,
        default=default_target(),
        required=False
    )
    sub_parser.add_argument(
        "-p",
        "--profile",
        help="Target dbt profile",
        type=str,
        default=DBT_PROFILE_DEFAULT,
        required=False
    )
    sub_parser.add_argument(
        "-laf",
        "--loaded-at-field",
        help="Source loaded_at_field used for freshness",
        type=str,
        default='sys_load_date',
        required=False
    )
    sub_parser.add_argument(
        "-gf",
        "--get-freshness",
        help="Generate source freshness",
        const=True,
        action='store_const',
        default=False, 
        required=False
    )

    sub_parser.set_defaults(func=source.main)


def build_package_subparser(sub_parsers):

    sub_parser = sub_parsers.add_parser(
        "package", 
        help="Create dbt package in .export/ containing sources, using model-" \
            "properties files in the project"
    )

    sub_parser.set_defaults(func=package.main)


def build_clean_subparser(sub_parsers):

    sub_parser = sub_parsers.add_parser(
        "clean", 
        help="Clean temporary files generated by dbtgen"
    )

    sub_parser.add_argument(
        "-s",
        "--select",
        help="Selected sources",
        type=str,
        default=None,
        required=False
    )

    sub_parser.set_defaults(func=clean.main)


def cli():

    logger.info('Running dbtgen')

    parser = argparse.ArgumentParser(prog='dbtgen')
    subparsers = parser.add_subparsers(title='Available actions / sub-commands')

    build_model_subparser(subparsers)
    build_model_properties_subparser(subparsers)
    build_source_subparser(subparsers)
    build_package_subparser(subparsers)
    build_clean_subparser(subparsers)

    args = parser.parse_args()
    args.func(args)

    logger.info('Finished')
